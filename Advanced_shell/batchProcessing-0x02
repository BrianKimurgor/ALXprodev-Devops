#!/bin/bash

# Directory for storing data files
DIRECTORY="Advanced_shell"
mkdir -p "$DIRECTORY"

# List of Pokémon to fetch
POKEMON_LIST=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon")

# Base API URL
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"

# Max retries
MAX_RETRIES=3

# Loop through the list of Pokémon
for POKEMON in "${POKEMON_LIST[@]}"; do
  # Convert Pokémon name to lowercase for API consistency
  POKEMON_LOWER=$(echo "$POKEMON" | awk '{print tolower($0)}')

  # File to store the data
  DATA_FILE="$DIRECTORY/${POKEMON_LOWER}.json"

  echo "Fetching data for $POKEMON..."

  RETRIES=0
  SUCCESS=0

  # Retry mechanism
  while [[ $RETRIES -lt $MAX_RETRIES ]]; do
    # Fetch data
    RESPONSE=$(curl -s -w "%{http_code}" -o "$DATA_FILE" "$API_BASE_URL/$POKEMON_LOWER")

    # Extract HTTP status code
    HTTP_STATUS="${RESPONSE: -3}"

    if [[ "$HTTP_STATUS" -eq 200 ]]; then
      echo "Data for $POKEMON saved to $DATA_FILE."
      SUCCESS=1
      break
    else
      echo "Attempt $(($RETRIES + 1)) failed for $POKEMON. HTTP Status: $HTTP_STATUS"
      ((RETRIES++))
      sleep 2 # Delay before retrying
    fi
  done

  # Log error if all retries fail
  if [[ $SUCCESS -ne 1 ]]; then
    echo "Failed to fetch data for $POKEMON after $MAX_RETRIES attempts."
    echo "$POKEMON: Failed after $MAX_RETRIES attempts" >> "$DIRECTORY/errors.txt"
    rm -f "$DATA_FILE" # Remove incomplete file
  fi

  # Delay between requests to handle rate-limiting
  sleep 2
done

echo "Batch processing complete."
